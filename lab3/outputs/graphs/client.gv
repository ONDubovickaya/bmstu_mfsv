digraph p_client {
size="8,10";
  GT [shape=box,style=dotted,label="client"];
  GT -> S1;
	S1 -> S2  [color=blue,style=solid,label="msg.msg_type = SYN"];
	S2 -> S3  [color=blue,style=solid,label="msg.payload = 0"];
	S3 -> S4  [color=blue,style=solid,label="printf('[client] Sending SYN to server.. ')"];
	S4 -> S8  [color=red,style=bold,label="client_to_server!msg.msg_type,msg.payload"];
	S8 -> S6  [color=black,style=dashed,label="server_to_client?msg.msg_type,msg.payload"];
	S6 -> S7  [color=black,style=dashed,label="assert((msg.msg_type==SYN_ACK))"];
	S7 -> S9  [color=red,style=bold,label="printf('[client] Received SYN_ACK from server ')"];
	S9 -> S10  [color=blue,style=solid,label="msg.msg_type = ACK"];
	S10 -> S11  [color=blue,style=solid,label="msg.payload = 0"];
	S11 -> S12  [color=blue,style=solid,label="printf('[client] Sending ACK to server.. ')"];
	S12 -> S13  [color=red,style=bold,label="client_to_server!msg.msg_type,msg.payload"];
	S13 -> S14  [color=blue,style=solid,label="i = 0"];
	S14 -> S27  [color=blue,style=solid,label="i = 1"];
	S27 -> S16  [color=blue,style=solid,label="((i<=3))"];
	S27 -> S30  [color=blue,style=solid,label="else"];
	S16 -> S17  [color=blue,style=solid,label="msg.msg_type = DATA"];
	S17 -> S18  [color=blue,style=solid,label="msg.payload = i"];
	S18 -> S19  [color=blue,style=solid,label="printf('[client] Sending DATA (payload=%d) to server.. ',msg.payload)"];
	S19 -> S23  [color=red,style=bold,label="client_to_server!msg.msg_type,msg.payload"];
	S23 -> S21  [color=black,style=dashed,label="server_to_client?msg.msg_type,msg.payload"];
	S21 -> S22  [color=black,style=dashed,label="assert((msg.msg_type==ACK))"];
	S22 -> S24  [color=red,style=bold,label="printf('[client] Received ACK for DATA from server ')"];
	S24 -> S27  [color=blue,style=solid,label="i = (i+1)"];
	S30 -> S31  [color=blue,style=solid,label="msg.msg_type = FIN"];
	S31 -> S32  [color=blue,style=solid,label="msg.payload = 0"];
	S32 -> S33  [color=blue,style=solid,label="printf('[client] Sending FIN to server.. ')"];
	S33 -> S37  [color=red,style=bold,label="client_to_server!msg.msg_type,msg.payload"];
	S37 -> S35  [color=black,style=dashed,label="server_to_client?msg.msg_type,msg.payload"];
	S35 -> S36  [color=black,style=dashed,label="assert((msg.msg_type==FIN_ACK))"];
	S36 -> S38  [color=red,style=bold,label="printf('[client] Received FIN_ACK from server ')"];
	S38 -> S39  [color=blue,style=solid,label="msg.msg_type = ACK"];
	S39 -> S40  [color=blue,style=solid,label="msg.payload = 0"];
	S40 -> S41  [color=blue,style=solid,label="printf('[client] Sending ACK to server.. ')"];
	S41 -> S42  [color=red,style=bold,label="client_to_server!msg.msg_type,msg.payload"];
	S42 -> S0  [color=blue,style=solid,label="-end-"];
  S42 [color=blue,style=bold,shape=box];
}